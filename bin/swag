#!/usr/bin/env python

import re, sys, os, json, yaml, inflection
import lib

def env_var(word):
  key = underscore(word).upper()
  if os.environ.get(key):
    return os.environ.get(key)
  return f"${{{key}}}"

def underscore(word):
  return inflection.underscore(word).upper()

def to_env_var(matched):
  return env_var(underscore(matched.group(1)))

def to_snake_case(matched):
  return inflection.underscore(matched.group(1))

def resolve_ref(apispec, ref):
  paths = ref.split("#")[1].strip("/").split("/")
  data = apispec
  for p in paths:
    data = data[p]
  return data

def schema_to_value(apispec, schema):
  data = {}

  for k in schema['properties'].keys():
    if k == 'xml':
      continue

    prop = schema['properties'][k]
    if '$ref' in prop:
      data[k] = schema_to_value(apispec, resolve_ref(apispec, prop['$ref']))
    elif prop['type'] == 'array':
      items = prop['items']
      if '$ref' in items:
        data[k] = [schema_to_value(apispec, resolve_ref(apispec, items['$ref']))]
      else:
        data[k] = [env_var(k)]
    elif prop['type'] == 'object':
      data[k] = {k: env_var(k)}
    elif prop['type'] == 'string':
      data[k] = env_var(k)
    elif prop['type'] == 'integer':
      data[k] = env_var(k)
    elif prop['type'] == 'boolean':
      data[k] = False

  return data

def main(argv):
  cwd = os.getcwd()
  api = argv[1:][0]

  with open(api) as f:
    apispec = json.load(f)

  paths = [k for k in apispec['paths'].keys()]
  prefix = os.path.commonprefix(paths)
  
  for p in paths:
    if len(p.replace(prefix, "/").strip("/")) == 0:
      prefix = "/"

  if len(prefix.strip("/")) > 0:
    env = {}
    if os.path.exists("env.yml"):
      with open("env.yml", 'r') as ef:
        env = yaml.load(ef, Loader=yaml.FullLoader)
    if 'api_prefix' not in env:
      env['api_prefix'] = prefix
      with open(f'env.yml', 'w') as outfile:
        yaml.dump(env, outfile, default_flow_style=False)

  for _p in apispec['paths']:
    for m in apispec['paths'][_p].keys():
      path = _p.replace(prefix, "/")
      clean = re.sub('\{(.+?)\}', to_snake_case, path).strip("/\\")
      clean = re.sub("\//*", ".", clean)

      d = {
        "method": m.upper(),
        "path": re.sub('\{(.+?)\}', to_env_var, path)
      }

      if 'parameters' in apispec['paths'][_p][m]:
        for p in apispec['paths'][_p][m]['parameters']:
          if p['in'] == 'query':
            if 'query' not in d:
              d['query'] = {}
            
            ptype = p['type'] if 'type' in p else p['schema']['type']

            if ptype == 'array':
              d['query'][p['name']] = [env_var(p['name'])] 
            elif ptype == 'boolean':
              d['query'][p['name']] = True
            elif ptype == 'number' or ptype == 'integer':
              d['query'][p['name']] = 123
            else:
              d['query'][p['name']] = env_var(p['name'])

          elif p['in'] == 'formData':
            if 'form' not in d:
              d['form'] = {}

            ptype = p['type'] if 'type' in p else p['schema']['type']

            if ptype == 'boolean':
              d['form'][p['name']] = True
            elif ptype == 'number' or ptype == 'integer':
              d['form'][p['name']] = 123
            else:
              d['form'][p['name']] = env_var(p['name'])
          elif p['in'] == 'body':
            if 'items' in p['schema']:
              schema = resolve_ref(apispec, p['schema']['items']['$ref'])
              val = schema_to_value(apispec, schema)
              d['body'] = [val]
            else:
              schema = resolve_ref(apispec, p['schema']['$ref'])
              val = schema_to_value(apispec, schema)
              d['body'] = val

      if os.path.exists(f'{m}.{clean}.yml'):
        with open(f'{m}.{clean}.yml', 'r') as ef:
          old = yaml.load(ef, Loader=yaml.FullLoader)
          lib.update(d, old)

      with open(f'{m}.{clean}.yml', 'w') as outfile:
        yaml.dump(d, outfile, default_flow_style=False)

if __name__ == "__main__":
  main(sys.argv)
